defmodule TdDfLib.FormatTest do
  use ExUnit.Case

  import TdDfLib.Factory
  alias TdDfLib.Format
  alias TdDfLib.RichText

  describe "create_changeset/2" do
    setup do
      identifier_name = "identifier"

      with_identifier = %{
        id: System.unique_integer([:positive]),
        name: "Ingesta template with identifier field",
        label: "ingesta_with_identifier",
        scope: "ie",
        content: [
          %{
            "fields" => [
              %{
                "cardinality" => "1",
                "default" => %{"value" => "", "origin" => "default"},
                "label" => "Identifier",
                "name" => identifier_name,
                "subscribable" => false,
                "type" => "string",
                "values" => nil,
                "widget" => "identifier"
              },
              %{
                "cardinality" => "1",
                "default" => %{"value" => "", "origin" => "default"},
                "label" => "Text",
                "name" => "text",
                "subscribable" => false,
                "type" => "string",
                "values" => nil,
                "widget" => "text"
              }
            ],
            "name" => ""
          }
        ]
      }

      without_identifier = %{
        id: System.unique_integer([:positive]),
        name: "Ingesta template without identifier field",
        label: "ingesta_without_identifier",
        scope: "ie",
        content: [
          %{
            "fields" => [
              %{
                "cardinality" => "1",
                "default" => %{"value" => "", "origin" => "default"},
                "label" => "Text",
                "name" => "text",
                "subscribable" => false,
                "type" => "string",
                "values" => nil,
                "widget" => "text"
              }
            ],
            "name" => ""
          }
        ]
      }

      with_multifields = %{
        id: System.unique_integer([:positive]),
        name: "Ingesta template with multiple fields option",
        label: "ingesta_with_multifields",
        scope: "ie",
        content: [
          %{
            "fields" => [
              %{
                "cardinality" => "*",
                "default" => %{"value" => "", "origin" => "default"},
                "label" => "Text",
                "name" => "text",
                "subscribable" => false,
                "type" => "string",
                "values" => nil,
                "widget" => "text"
              }
            ],
            "name" => ""
          }
        ]
      }

      template_with_identifier = CacheHelpers.insert_template(with_identifier)
      template_without_identifier = CacheHelpers.insert_template(without_identifier)
      template_with_multifields = CacheHelpers.insert_template(with_multifields)

      [
        template_with_identifier: template_with_identifier,
        template_without_identifier: template_without_identifier,
        template_with_multifields: template_with_multifields,
        identifier_name: identifier_name
      ]
    end

    test "keeps an already present identifier", %{
      template_with_identifier: template_with_identifier,
      identifier_name: identifier_name
    } do
      old_content = %{identifier_name => %{"value" => "1234", "origin" => "autogenerated"}}
      changeset_content = %{}

      assert %{^identifier_name => %{"value" => "1234", "origin" => "autogenerated"}} =
               Format.maybe_put_identifier(
                 changeset_content,
                 old_content,
                 template_with_identifier.name
               )
    end

    test "puts a new identifier if the template has an identifier field", %{
      template_with_identifier: template_with_identifier,
      identifier_name: identifier_name
    } do
      assert %{^identifier_name => %{"value" => _identifier, "origin" => "autogenerated"}} =
               Format.maybe_put_identifier(%{}, %{}, template_with_identifier.name)
    end

    test "avoids putting new identifier if template lacks an identifier field", %{
      template_without_identifier: template_without_identifier,
      identifier_name: identifier_name
    } do
      refute match?(
               %{^identifier_name => _identifier},
               Format.maybe_put_identifier(%{}, %{}, template_without_identifier.name)
             )
    end
  end

  describe "set_default_value/2" do
    test "has no effect if value is present in content" do
      content = %{"foo" => %{"value" => "bar", "origin" => "user"}}
      field = %{"name" => "foo", "default" => %{"value" => "baz", "origin" => "default"}}
      assert Format.set_default_value(content, field) == content
    end

    test "uses field default if field is absent in content" do
      content = %{}
      field = %{"name" => "foo", "default" => %{"value" => "baz", "origin" => "default"}}

      assert Format.set_default_value(content, field) == %{
               "foo" => %{"value" => "baz", "origin" => "default"}
             }
    end

    test "uses empty default for values fields" do
      content = %{}
      field = %{"name" => "foo", "values" => []}

      assert Format.set_default_value(content, field) == %{
               "foo" => %{"value" => "", "origin" => "default"}
             }
    end

    test "uses empty string as default if field cardinality is '+'" do
      content = %{}
      field = %{"name" => "foo", "cardinality" => "+", "values" => []}

      assert Format.set_default_value(content, field) == %{
               "foo" => %{"value" => [""], "origin" => "default"}
             }
    end

    test "uses list with empty string as default if field cardinality is '*'" do
      content = %{}
      field = %{"name" => "foo", "cardinality" => "*", "values" => []}

      assert Format.set_default_value(content, field) == %{
               "foo" => %{"value" => [""], "origin" => "default"}
             }
    end

    test "sets all default values" do
      content = %{"xyzzy" => %{"value" => "sqpr", "origin" => "user"}}

      fields = [
        %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
        %{"name" => "bar", "cardinality" => "+", "values" => []},
        %{"name" => "baz", "cardinality" => "*", "values" => []},
        %{"name" => "xyzzy", "default" => %{"value" => "xyzzy", "origin" => "default"}}
      ]

      assert Format.set_default_values(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => [""], "origin" => "default"},
               "baz" => %{"value" => [""], "origin" => "default"},
               "xyzzy" => %{"value" => "sqpr", "origin" => "user"}
             }
    end

    test "sets default values for switch" do
      content = %{
        "xyzzy" => %{"value" => "spqr", "origin" => "user"},
        "bar" => %{"value" => "1", "origin" => "user"}
      }

      fields = [
        %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
        %{"name" => "bar", "cardinality" => "?", "values" => %{"fixed" => ["1", "2", "3"]}},
        %{
          "name" => "baz",
          "cardinality" => "+",
          "default" => %{"value" => %{"1" => ["a"], "2" => ["c"]}, "origin" => "default"},
          "values" => %{
            "switch" => %{"on" => "bar", "values" => %{"1" => ["a", "b"], "2" => ["b", "c", "d"]}}
          }
        },
        %{
          "name" => "xyz",
          "cardinality" => "?",
          "default" => %{"value" => %{"1" => "b", "2" => "d"}, "origin" => "default"},
          "values" => %{
            "switch" => %{"on" => "bar", "values" => %{"1" => ["a", "b"], "2" => ["b", "c", "d"]}}
          }
        },
        %{"name" => "xyzzy", "default" => %{"value" => "xyzzy", "origin" => "default"}}
      ]

      assert Format.set_default_values(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => "1", "origin" => "user"},
               "baz" => %{"value" => ["a"], "origin" => "default"},
               "xyz" => %{"value" => "b", "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"}
             }

      content = %{
        "xyzzy" => %{"value" => "spqr", "origin" => "user"},
        "bar" => %{"value" => "2", "origin" => "user"}
      }

      assert Format.set_default_values(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => "2", "origin" => "user"},
               "baz" => %{"value" => ["c"], "origin" => "default"},
               "xyz" => %{"value" => "d", "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"}
             }

      content = %{
        "xyzzy" => %{"value" => "spqr", "origin" => "user"},
        "bar" => %{"value" => "3", "origin" => "user"}
      }

      assert Format.set_default_values(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => "3", "origin" => "user"},
               "baz" => %{"value" => [""], "origin" => "default"},
               "xyz" => %{"value" => "", "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"}
             }

      content = %{"xyzzy" => %{"value" => "spqr", "origin" => "user"}}

      assert Format.set_default_values(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => "", "origin" => "default"},
               "baz" => %{"value" => [""], "origin" => "default"},
               "xyz" => %{"value" => "", "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"}
             }
    end

    test "domain dependent field" do
      content = %{"xyzzy" => %{"value" => "spqr", "origin" => "user"}}

      fields = [
        %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
        %{
          "name" => "bar",
          "cardinality" => "+",
          "default" => %{"value" => %{"1" => ["a"], "2" => ["f"]}, "origin" => "default"},
          "values" => %{
            "domain" => %{"1" => ["a", "b", "c"], "2" => ["d", "e", "f"]}
          }
        },
        %{
          "name" => "xyz",
          "cardinality" => "?",
          "default" => %{"value" => %{"2" => "b", "5" => "d"}, "origin" => "default"},
          "values" => %{
            "domain" => %{"2" => ["i", "b"], "5" => ["d", "p"]}
          }
        },
        %{"name" => "xyzzy", "default" => %{"value" => "xyzzy", "origin" => "default"}}
      ]

      assert Format.set_default_values(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => [""], "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"},
               "xyz" => %{"value" => "", "origin" => "default"}
             }

      assert Format.set_default_values(content, fields, domain_id: 1) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => ["a"], "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"},
               "xyz" => %{"value" => "", "origin" => "default"}
             }

      assert Format.set_default_values(content, fields, domain_id: 2) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => ["f"], "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"},
               "xyz" => %{"value" => "b", "origin" => "default"}
             }

      assert Format.set_default_values(content, fields, domain_id: 5) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => [""], "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"},
               "xyz" => %{"value" => "d", "origin" => "default"}
             }
    end

    test "set_default_values/2 sets default values for dependent values" do
      content = %{
        "bar" => %{"value" => "1", "origin" => "user"},
        "foo" => %{"value" => "6", "origin" => "user"}
      }

      fields = [
        %{"name" => "foo", "cardinality" => "?", "values" => %{"fixed" => ["6", "7", "8"]}},
        %{"name" => "bar", "cardinality" => "?", "values" => %{"fixed" => ["1", "2", "3"]}},
        %{
          "name" => "baz",
          "cardinality" => "+",
          "depends" => %{"on" => "foo", "to_be" => ["7", "8"]},
          "default" => %{"value" => %{"1" => ["a"], "2" => ["c"]}, "origin" => "default"},
          "values" => %{
            "switch" => %{"on" => "bar", "values" => %{"1" => ["a", "b"], "2" => ["b", "c", "d"]}}
          }
        },
        %{
          "name" => "xyz",
          "cardinality" => "?",
          "depends" => %{"on" => "foo", "to_be" => ["6", "7"]},
          "default" => %{"value" => %{"1" => "b", "2" => "d"}, "origin" => "default"},
          "values" => %{
            "switch" => %{"on" => "bar", "values" => %{"1" => ["a", "b"], "2" => ["b", "c", "d"]}}
          }
        }
      ]

      assert Format.set_default_values(content, fields) == %{
               "foo" => %{"value" => "6", "origin" => "user"},
               "bar" => %{"value" => "1", "origin" => "user"},
               "xyz" => %{"value" => "b", "origin" => "default"}
             }

      content = %{
        "bar" => %{"value" => "1", "origin" => "user"},
        "foo" => %{"value" => "7", "origin" => "user"}
      }

      assert Format.set_default_values(content, fields) == %{
               "foo" => %{"value" => "7", "origin" => "user"},
               "bar" => %{"value" => "1", "origin" => "user"},
               "baz" => %{"value" => ["a"], "origin" => "default"},
               "xyz" => %{"value" => "b", "origin" => "default"}
             }

      content = %{
        "bar" => %{"value" => "2", "origin" => "user"},
        "foo" => %{"value" => "8", "origin" => "user"}
      }

      assert Format.set_default_values(content, fields) == %{
               "foo" => %{"value" => "8", "origin" => "user"},
               "bar" => %{"value" => "2", "origin" => "user"},
               "baz" => %{"value" => ["c"], "origin" => "default"}
             }
    end
  end

  describe "apply_template/2" do
    test "sets default values and removes redundant fields" do
      content = %{"xyzzy" => %{"value" => "spqr", "origin" => "user"}}

      fields = [
        %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
        %{"name" => "bar", "cardinality" => "+", "values" => []},
        %{"name" => "baz", "cardinality" => "*", "values" => []}
      ]

      assert Format.apply_template(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => [""], "origin" => "default"},
               "baz" => %{"value" => [""], "origin" => "default"}
             }
    end

    test "sets default values of switch like fields" do
      content = %{
        "xyzzy" => %{"value" => "spqr", "origin" => "user"},
        "bar" => %{"value" => "1", "origin" => "user"}
      }

      fields = [
        %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
        %{"name" => "bar", "cardinality" => "?", "values" => %{"fixed" => ["1", "2", "3"]}},
        %{
          "name" => "baz",
          "cardinality" => "+",
          "default" => %{"value" => %{"1" => ["a"], "2" => ["c"]}, "origin" => "default"},
          "values" => %{
            "switch" => %{"on" => "bar", "values" => %{"1" => ["a", "b"], "2" => ["b", "c", "d"]}}
          }
        },
        %{
          "name" => "xyz",
          "cardinality" => "?",
          "default" => %{"value" => %{"1" => "b", "2" => "d"}, "origin" => "default"},
          "values" => %{
            "switch" => %{"on" => "bar", "values" => %{"1" => ["a", "b"], "2" => ["b", "c", "d"]}}
          }
        },
        %{"name" => "xyzzy", "default" => %{"value" => "xyzzy", "origin" => "default"}}
      ]

      assert Format.apply_template(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => "1", "origin" => "user"},
               "baz" => %{"value" => ["a"], "origin" => "default"},
               "xyz" => %{"value" => "b", "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"}
             }

      content = %{
        "xyzzy" => %{"value" => "spqr", "origin" => "user"},
        "bar" => %{"value" => "2", "origin" => "user"}
      }

      assert Format.apply_template(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => "2", "origin" => "user"},
               "baz" => %{"value" => ["c"], "origin" => "default"},
               "xyz" => %{"value" => "d", "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"}
             }

      content = %{
        "xyzzy" => %{"value" => "spqr", "origin" => "user"},
        "bar" => %{"value" => "3", "origin" => "user"}
      }

      assert Format.apply_template(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => "3", "origin" => "user"},
               "baz" => %{"value" => [""], "origin" => "default"},
               "xyz" => %{"value" => "", "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"}
             }

      content = %{"xyzzy" => %{"value" => "spqr", "origin" => "user"}}

      assert Format.apply_template(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => "", "origin" => "default"},
               "baz" => %{"value" => [""], "origin" => "default"},
               "xyz" => %{"value" => "", "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"}
             }
    end

    test "sets default values of domain dependent field" do
      content = %{"xyzzy" => %{"value" => "spqr", "origin" => "user"}}

      fields = [
        %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
        %{
          "name" => "bar",
          "cardinality" => "+",
          "default" => %{"value" => %{"1" => ["a"], "2" => ["f"]}, "origin" => "default"},
          "values" => %{
            "domain" => %{"1" => ["a", "b", "c"], "2" => ["d", "e", "f"]}
          }
        },
        %{
          "name" => "xyz",
          "cardinality" => "?",
          "default" => %{"value" => %{"2" => "b", "5" => "d"}, "origin" => "default"},
          "values" => %{
            "domain" => %{"2" => ["i", "b"], "5" => ["d", "p"]}
          }
        },
        %{"name" => "xyzzy", "default" => %{"value" => "xyzzy", "origin" => "default"}}
      ]

      assert Format.apply_template(content, fields) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => [""], "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"},
               "xyz" => %{"value" => "", "origin" => "default"}
             }

      assert Format.apply_template(content, fields, domain_id: 1) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => ["a"], "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"},
               "xyz" => %{"value" => "", "origin" => "default"}
             }

      assert Format.apply_template(content, fields, domain_id: 2) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => ["f"], "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"},
               "xyz" => %{"value" => "b", "origin" => "default"}
             }

      assert Format.apply_template(content, fields, domain_id: 5) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => [""], "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"},
               "xyz" => %{"value" => "d", "origin" => "default"}
             }

      assert Format.apply_template(content, fields, domain_ids: [1, 2, 5]) == %{
               "foo" => %{"value" => "foo", "origin" => "default"},
               "bar" => %{"value" => ["a"], "origin" => "default"},
               "xyzzy" => %{"value" => "spqr", "origin" => "user"},
               "xyz" => %{"value" => "b", "origin" => "default"}
             }
    end

    test "return node correctly when template and node exist" do
      create_hierarchy(nil)
      content = %{"hierarchy_field" => %{"value" => 51, "origin" => "user"}}

      fields = [
        %{
          "cardinality" => 1,
          "name" => "hierarchy_field",
          "type" => "hierarchy",
          "values" => %{"hierarchy" => %{"id" => 1927}}
        }
      ]

      assert Format.apply_template(content, fields) == %{
               "hierarchy_field" => %{"value" => 51, "origin" => "user"}
             }
    end

    test "returns nil when no template is provided" do
      content = %{"xyzzy" => %{"value" => "spqr", "origin" => "user"}}
      assert Format.apply_template(content, nil) == %{}
    end

    test "returns nil when no content is provided" do
      fields = [
        %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
        %{"name" => "bar", "cardinality" => "+", "values" => []},
        %{"name" => "baz", "cardinality" => "*", "values" => []}
      ]

      assert Format.apply_template(nil, fields) == %{}
    end

    test "doesn't set defaults if not specified" do
      content = %{"bar" => %{"value" => ["baz"], "origin" => "user"}}

      fields = [
        %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
        %{"name" => "bar", "cardinality" => "+", "values" => []},
        %{"name" => "baz", "cardinality" => "*", "values" => []}
      ]

      assert Format.apply_template(content, fields, apply_default_values?: false) == content
    end
  end

  describe "format_field/2" do
    setup :create_hierarchy

    test "format_field returns url wrapped" do
      formatted_value = Format.format_field(%{"content" => "https://google.es", "type" => "url"})

      assert formatted_value == [
               %{
                 "url_name" => "https://google.es",
                 "url_value" => "https://google.es"
               }
             ]
    end

    test "format_field of string with fixed tuple values returns value if text is provided " do
      fixed_tuples = [%{"value" => "value1", "text" => "description1"}]

      formatted_value =
        Format.format_field(%{
          "content" => "description1",
          "type" => "string",
          "values" => %{"fixed_tuple" => fixed_tuples}
        })

      assert formatted_value == ["value1"]
    end

    test "format_field of string with fixed values and lang returns key value" do
      fixed = ["one", "two", "three"]

      CacheHelpers.put_i18n_message("es", %{
        message_id: "fields.label i18n.one",
        definition: "uno"
      })

      formatted_value =
        Format.format_field(%{
          "label" => "label i18n",
          "content" => "uno",
          "type" => "string",
          "values" => %{"fixed" => fixed},
          "lang" => "es"
        })

      assert formatted_value == "one"
    end

    test "format_field of string with switch on values and lang returns key value" do
      CacheHelpers.put_i18n_message("es", %{
        message_id: "fields.label i18n.one",
        definition: "uno"
      })

      formatted_value =
        Format.format_field(%{
          "label" => "label i18n",
          "content" => "uno",
          "type" => "string",
          "values" => %{
            "switch" => %{
              "on" => "Category",
              "values" => %{"A" => ["one"], "B" => ["two"]}
            }
          },
          "lang" => "es"
        })

      assert formatted_value == "one"
    end

    test "format_field of string with fixed values and lang and cardinality one or more returns key value" do
      fixed = ["one", "two", "three"]

      CacheHelpers.put_i18n_messages("es", [
        %{message_id: "fields.label i18n.one", definition: "uno"},
        %{message_id: "fields.label i18n.three", definition: "tres"}
      ])

      formatted_value =
        Format.format_field(%{
          "cardinality" => "+",
          "label" => "label i18n",
          "content" => "uno|tres",
          "type" => "string",
          "values" => %{"fixed" => fixed},
          "lang" => "es"
        })

      assert formatted_value == ["one", "three"]
    end

    test "format_field of string with fixed values without i18n key return content" do
      fixed = ["uno", "dos", "tres"]

      formatted_value =
        Format.format_field(%{
          "label" => "label i18n",
          "content" => "uno",
          "type" => "string",
          "values" => %{"fixed" => fixed},
          "lang" => "es"
        })

      assert formatted_value == "uno"
    end

    test "format_field of string with fixed values and some missing translations return error" do
      fixed = ["one", "two", "three"]

      CacheHelpers.put_i18n_messages("es", [
        %{message_id: "fields.label i18n.one", definition: "uno"},
        %{message_id: "fields.label i18n.two", definition: "dos"}
      ])

      formatted_value =
        Format.format_field(%{
          "cardinality" => "+",
          "label" => "label i18n",
          "content" => "uno|tres",
          "type" => "string",
          "values" => %{"fixed" => fixed},
          "lang" => "es"
        })

      assert formatted_value == ["one", "tres"]
    end

    test "format_field of enriched_text returns wrapped enriched text" do
      formatted_value =
        Format.format_field(%{
          "content" => "some enriched text",
          "type" => "enriched_text"
        })

      assert formatted_value == RichText.to_rich_text("some enriched text")
    end

    test "format_field of user type field" do
      assert ["foo"] ==
               Format.format_field(%{"content" => "foo", "type" => "user", "cardinality" => "+"})

      assert ["bar"] ==
               Format.format_field(%{
                 "content" => ["bar"],
                 "type" => "user",
                 "cardinality" => "+"
               })

      assert "bar" ==
               Format.format_field(%{"content" => "bar", "type" => "user", "cardinality" => "1"})
    end

    test "format_field with multiple fields" do
      assert ["foo"] ==
               Format.format_field(%{
                 "content" => "foo",
                 "type" => "string",
                 "cardinality" => "+",
                 "values" => %{}
               })

      assert ["foo"] ==
               Format.format_field(%{
                 "content" => "foo",
                 "type" => "string",
                 "cardinality" => "*",
                 "values" => %{}
               })

      assert ["foo", "bar"] ==
               Format.format_field(%{
                 "content" => "foo|bar",
                 "type" => "string",
                 "cardinality" => "+",
                 "values" => %{}
               })

      assert ["foo", "bar"] ==
               Format.format_field(%{
                 "content" => "foo|bar",
                 "type" => "string",
                 "cardinality" => "*",
                 "values" => %{}
               })

      assert ["bar"] ==
               Format.format_field(%{
                 "content" => "bar",
                 "type" => "string",
                 "cardinality" => "+",
                 "values" => %{}
               })

      assert [] ==
               Format.format_field(%{
                 "content" => "",
                 "type" => "string",
                 "cardinality" => "+",
                 "values" => %{}
               })

      assert ["bar|foo"] ==
               Format.format_field(%{
                 "content" => "bar|foo",
                 "type" => "string",
                 "cardinality" => "1",
                 "values" => %{}
               })

      assert [1, 23, 45] ==
               Format.format_field(%{
                 "content" => "1|23|45|",
                 "type" => "integer",
                 "cardinality" => "*",
                 "values" => %{}
               })

      assert [1, 2.3, 4.5] ==
               Format.format_field(%{
                 "content" => "1.0|2.3|4.5|",
                 "type" => "float",
                 "cardinality" => "*",
                 "values" => %{}
               })
    end

    test "format_field with content hierarchy single node with cardinality +", %{
      hierarchy: %{id: id, nodes: nodes}
    } do
      [%{name: node_name, key: key} | _] = nodes

      assert [^key] =
               Format.format_field(%{
                 "content" => "/#{node_name}",
                 "type" => "hierarchy",
                 "cardinality" => "+",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })
    end

    test "format_field with content hierarchy single node with cardinality 1", %{
      hierarchy: %{id: id, nodes: nodes}
    } do
      [%{name: node_name, key: key} | _] = nodes

      assert ^key =
               Format.format_field(%{
                 "content" => "/#{node_name}",
                 "type" => "hierarchy",
                 "cardinality" => "1",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })
    end

    test "format_field with invalid content hierarchy  cardinality 1", %{
      hierarchy: %{id: id}
    } do
      assert :error =
               Format.format_field(%{
                 "content" => "invalid",
                 "type" => "hierarchy",
                 "cardinality" => "1",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })

      assert "" =
               Format.format_field(%{
                 "content" => "",
                 "type" => "hierarchy",
                 "cardinality" => "1",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })
    end

    test "format_field with content hierarchy multiple node with cardinality *", %{
      hierarchy: %{id: id, nodes: nodes}
    } do
      [
        %{name: node_name_1, key: key_1},
        %{name: node_name_2, key: key_2} | _
      ] = nodes

      assert [^key_1, ^key_2] =
               Format.format_field(%{
                 "content" => "/#{node_name_1}|#{node_name_2}",
                 "type" => "hierarchy",
                 "cardinality" => "*",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })
    end

    test "format_field with hierarchy finding more thane one nodes with cardinality 1", %{
      hierarchy: %{id: id, nodes: nodes}
    } do
      %{name: node_name_2} = Enum.at(nodes, 2)

      assert {:error, [_ | _]} =
               Format.format_field(%{
                 "content" => node_name_2,
                 "type" => "hierarchy",
                 "cardinality" => "1",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })
    end

    test "format_field with hierarchy multiple node, finding more thane one nodes with cardinality *",
         %{
           hierarchy: %{id: id, nodes: nodes}
         } do
      %{name: node_name_2} = Enum.at(nodes, 2)
      %{name: node_name_3} = Enum.at(nodes, 3)

      assert [{:error, [_ | _]}, {:error, [_ | _]}] =
               Format.format_field(%{
                 "content" => "#{node_name_2}|#{node_name_3}",
                 "type" => "hierarchy",
                 "cardinality" => "*",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })
    end

    test "format_field with hierarchy multiple node, first correct second with more than one node",
         %{
           hierarchy: %{id: id, nodes: nodes}
         } do
      %{path: path, key: key} = Enum.at(nodes, 2)
      %{name: node_name_3} = Enum.at(nodes, 3)

      assert [^key, {:error, [_ | _]}] =
               Format.format_field(%{
                 "content" => "#{path}|#{node_name_3}",
                 "type" => "hierarchy",
                 "cardinality" => "*",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })
    end

    test "format_field with hierarchy multiple node, finding one node with absolute path",
         %{
           hierarchy: %{id: id, nodes: nodes}
         } do
      %{key: key, name: node_name} = Enum.at(nodes, 3)

      assert [^key] =
               Format.format_field(%{
                 "content" => "/#{node_name}",
                 "type" => "hierarchy",
                 "cardinality" => "*",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })
    end

    test "format_field with hierarchy multiple node, finding one node with relative path multiple childs",
         %{
           hierarchy: %{id: id, nodes: nodes}
         } do
      %{name: node_name} = Enum.at(nodes, 3)

      assert [{:error, [_, _, _]}] =
               Format.format_field(%{
                 "content" => "#{node_name}",
                 "type" => "hierarchy",
                 "cardinality" => "*",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })
    end

    test "format_field with content hierarchy by key", %{
      hierarchy: %{id: id, nodes: nodes}
    } do
      [%{key: key} | _] = nodes

      assert [^key] =
               Format.format_field(%{
                 "content" => key,
                 "type" => "hierarchy",
                 "cardinality" => "+",
                 "values" => %{"hierarchy" => %{"id" => id}}
               })
    end

    test "format_field of integer and float types" do
      assert 1 == Format.format_field(%{"content" => "1", "type" => "integer"})
      assert -1 == Format.format_field(%{"content" => "-1", "type" => "integer"})
      assert 1.5 == Format.format_field(%{"content" => "1.5", "type" => "float"})
      assert -1.5 == Format.format_field(%{"content" => "-1.5", "type" => "float"})
      assert -1.0 == Format.format_field(%{"content" => "-1", "type" => "float"})
    end

    test "format_field for table field" do
      assert [] ==
               Format.format_field(%{
                 "content" => "Col A;Col B",
                 "type" => "table",
                 "cardinality" => "*"
               })
    end

    test "format_field for table field with \n in content" do
      assert [] ==
               Format.format_field(%{
                 "content" => "Col A;Col B\n",
                 "type" => "table",
                 "cardinality" => "*"
               })

      assert [%{"Col A" => "Cell A1", "Col B" => " Cell B1"}] ==
               Format.format_field(%{
                 "content" => "Col A;Col B\nCell A1; Cell B1\n",
                 "type" => "table",
                 "cardinality" => "*"
               })

      assert [%{"Col A" => "Cell A1", "Col B" => " Cell B1"}] ==
               Format.format_field(%{
                 "content" => "Col A;Col B\nCell A1; Cell B1",
                 "type" => "table",
                 "cardinality" => "*"
               })

      assert [
               %{"Col A" => "Cell A1", "Col B" => " Cell B1"},
               %{"Col A" => "Cell A2", "Col B" => " Cell B2"}
             ] ==
               Format.format_field(%{
                 "content" => "Col A;Col B\nCell A1; Cell B1\nCell A2; Cell B2",
                 "type" => "table",
                 "cardinality" => "*"
               })
    end

    test "format_field for table field with \n\n in content" do
      assert [] ==
               Format.format_field(%{
                 "content" => "Col A;Col B\n\n",
                 "type" => "table",
                 "cardinality" => "*"
               })

      assert [%{"Col A" => "Cell A1", "Col B" => " Cell B1"}] ==
               Format.format_field(%{
                 "content" => "Col A;Col B\nCell A1; Cell B1\n\n",
                 "type" => "table",
                 "cardinality" => "*"
               })

      assert [%{"Col A" => "Cell A1", "Col B" => " Cell B1"}] ==
               Format.format_field(%{
                 "content" => "Col A;Col B\n\nCell A1; Cell B1\n\n",
                 "type" => "table",
                 "cardinality" => "*"
               })
    end
  end

  describe "flatten_content_fields" do
    test "flatten_content_fields will list all fields of content" do
      content = [
        %{
          "name" => "group1",
          "fields" => [
            %{"name" => "field11", "label" => "label11", "type" => "string"},
            %{"name" => "field12", "label" => "label12", "cardinality" => "+"}
          ]
        },
        %{
          "name" => "group2",
          "fields" => [
            %{"name" => "field21", "label" => "label21", "widget" => "default"},
            %{
              "name" => "field22",
              "label" => "label22",
              "values" => %{"fixed" => ["a", "b", "c"]}
            }
          ]
        }
      ]

      flat_content = Format.flatten_content_fields(content)

      expected_flat_content = [
        %{"group" => "group1", "name" => "field11", "label" => "label11", "type" => "string"},
        %{"group" => "group1", "name" => "field12", "label" => "label12", "cardinality" => "+"},
        %{"group" => "group2", "name" => "field21", "label" => "label21", "widget" => "default"},
        %{
          "group" => "group2",
          "name" => "field22",
          "label" => "label22",
          "values" => %{"fixed" => ["a", "b", "c"]}
        }
      ]

      assert flat_content == expected_flat_content
    end

    test "flatten_content_fields with i18n will list all fields of content" do
      content = [
        %{
          "name" => "group1",
          "fields" => [
            %{"name" => "field11", "label" => "label11", "widget" => "default"},
            %{
              "name" => "field12",
              "label" => "label12",
              "values" => %{"fixed" => ["a", "b", "c"]}
            }
          ]
        }
      ]

      lang = "es"

      CacheHelpers.put_i18n_message(lang, %{message_id: "fields.label11", definition: "es_field"})

      flat_content = Format.flatten_content_fields(content, lang)

      expected_flat_content = [
        %{
          "group" => "group1",
          "name" => "field11",
          "label" => "label11",
          "widget" => "default",
          "definition" => "es_field"
        },
        %{
          "group" => "group1",
          "name" => "field12",
          "label" => "label12",
          "values" => %{"fixed" => ["a", "b", "c"]},
          "definition" => "label12"
        }
      ]

      assert flat_content == expected_flat_content
    end
  end

  describe "search_values/2" do
    setup :create_system

    test "removes redundant fields and applies default values" do
      content = %{
        "xyzzy" => %{"value" => "spqr", "origin" => "user"},
        "bay" => %{
          "value" => %{
            "object" => "value",
            "document" => %{
              "data" => %{},
              "nodes" => [
                %{
                  "data" => %{},
                  "type" => "paragraph",
                  "nodes" => [
                    %{
                      "text" => "My Text",
                      "marks" => [
                        %{
                          "data" => %{},
                          "type" => "bold",
                          "object" => "mark"
                        }
                      ],
                      "object" => "text"
                    }
                  ],
                  "object" => "block"
                }
              ],
              "object" => "document"
            }
          },
          "origin" => "user"
        }
      }

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
            %{"name" => "bar", "cardinality" => "+", "values" => []},
            %{"name" => "baz", "cardinality" => "*", "values" => []},
            %{"name" => "bay", "type" => "enriched_text"}
          ]
        }
      ]

      assert Format.search_values(content, %{content: fields}) == %{
               "bay" => %{"value" => "My Text", "origin" => "user"},
               "bar" => %{"origin" => "default", "value" => [""]},
               "baz" => %{"origin" => "default", "value" => [""]},
               "foo" => %{"origin" => "default", "value" => "foo"}
             }
    end

    test "doesn't apply default values when specified" do
      content = %{
        "xyzzy" => %{"value" => "spqr", "origin" => "user"},
        "bay" => %{
          "value" => %{
            "object" => "value",
            "document" => %{
              "data" => %{},
              "nodes" => [
                %{
                  "data" => %{},
                  "type" => "paragraph",
                  "nodes" => [
                    %{
                      "text" => "My Text",
                      "marks" => [
                        %{
                          "data" => %{},
                          "type" => "bold",
                          "object" => "mark"
                        }
                      ],
                      "object" => "text"
                    }
                  ],
                  "object" => "block"
                }
              ],
              "object" => "document"
            }
          },
          "origin" => "user"
        }
      }

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
            %{"name" => "bar", "cardinality" => "+", "values" => []},
            %{"name" => "baz", "cardinality" => "*", "values" => []},
            %{"name" => "bay", "type" => "enriched_text"}
          ]
        }
      ]

      assert Format.search_values(content, %{content: fields}, apply_default_values?: false) == %{
               "bay" => %{"value" => "My Text", "origin" => "user"}
             }
    end

    test "gets system from cache and formats it", %{system: system} do
      content = %{"system" => %{"value" => %{"id" => system.id}, "origin" => "user"}}

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{"name" => "system", "type" => "system", "cardinality" => 1}
          ]
        }
      ]

      assert %{"system" => %{"value" => [system], "origin" => "user"}} =
               Format.search_values(content, %{content: fields})

      content = %{"system" => %{"value" => [%{"id" => system.id}], "origin" => "user"}}

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{"name" => "system", "type" => "system", "cardinality" => "*"}
          ]
        }
      ]

      assert %{"system" => %{"value" => [_system], "origin" => "user"}} =
               Format.search_values(content, %{content: fields})
    end

    test "returns unchanged domain fields" do
      content = %{"domain" => %{"value" => 123, "origin" => "user"}}

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{"name" => "domain", "type" => "domain", "cardinality" => 1}
          ]
        }
      ]

      assert %{"domain" => %{"value" => 123, "origin" => "user"}} =
               Format.search_values(content, %{content: fields})

      content = %{"domain" => %{"value" => [123, 456], "origin" => "user"}}

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{"name" => "domain", "type" => "domain", "cardinality" => "*"}
          ]
        }
      ]

      assert %{"domain" => %{"value" => [123, 456], "origin" => "user"}} =
               Format.search_values(content, %{content: fields})
    end

    test "returns nil when no template is provided" do
      content = %{"xyzzy" => %{"value" => "spqr", "origin" => "user"}}
      assert is_nil(Format.search_values(content, nil))
    end

    test "returns nil when no content is provided" do
      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{"name" => "foo", "default" => %{"value" => "foo", "origin" => "default"}},
            %{"name" => "bar", "cardinality" => "+", "values" => []},
            %{"name" => "baz", "cardinality" => "*", "values" => []},
            %{"name" => "bay", "type" => "enriched_text"}
          ]
        }
      ]

      assert is_nil(Format.search_values(nil, fields))
    end

    test "omits values of type image and copy" do
      content = %{
        "xyzzy" => %{"value" => "spqr", "origin" => "user"},
        "foo" => %{
          "value" => %{
            "object" => "value",
            "document" => %{
              "data" => %{},
              "nodes" => [
                %{
                  "data" => %{},
                  "type" => "paragraph",
                  "nodes" => [
                    %{
                      "text" => "My Text",
                      "marks" => [
                        %{
                          "data" => %{},
                          "type" => "bold",
                          "object" => "mark"
                        }
                      ],
                      "object" => "text"
                    }
                  ],
                  "object" => "block"
                }
              ],
              "object" => "document"
            }
          },
          "origin" => "user"
        },
        "bay" => %{"value" => "photo code...", "origin" => "user"},
        "xyz" => %{"value" => "some json code as tring...", "origin" => "user"}
      }

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{"name" => "foo", "type" => "enriched_text"},
            %{"name" => "bar", "cardinality" => "+", "values" => []},
            %{"name" => "baz", "cardinality" => "*", "values" => []},
            %{"name" => "bay", "type" => "image"},
            %{"name" => "xyz", "type" => "image"}
          ]
        }
      ]

      assert Format.search_values(content, %{content: fields}) == %{
               "foo" => %{"value" => "My Text", "origin" => "user"},
               "bar" => %{"origin" => "default", "value" => [""]},
               "baz" => %{"origin" => "default", "value" => [""]}
             }
    end

    test "omits url type when is empty string" do
      content = %{
        "url_field" => %{"value" => "", "origin" => "user"}
      }

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{
              "cardinality" => "*",
              "label" => "url_field",
              "name" => "url_field",
              "type" => "url",
              "widget" => "pair_list"
            }
          ]
        }
      ]

      assert Format.search_values(content, %{content: fields}) == %{}
    end

    test "omits url types when is empty string even with dependant fields" do
      content = %{
        "layer" => %{"value" => "Landing", "origin" => "user"}
      }

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{
              "cardinality" => "?",
              "label" => "Layer",
              "name" => "layer",
              "type" => "string",
              "values" => %{
                "fixed" => ["Business", "Landing", "Staging", "Source"]
              },
              "widget" => "dropdown"
            },
            %{
              "cardinality" => "*",
              "default" => "",
              "depends" => %{
                "on" => "layer",
                "to_be" => ["Business", "Staging"]
              },
              "label" => "Link - Documentación",
              "mandatory" => %{
                "on" => ""
              },
              "name" => "Link documentación",
              "type" => "url",
              "values" => nil,
              "widget" => "pair_list"
            }
          ]
        }
      ]

      assert %{"Link documentación" => %{"value" => nil}, "layer" => %{"value" => "Landing"}} =
               Format.search_values(content, %{content: fields})
    end

    test "works well for enriched texts" do
      content_with_enriched_text = %{
        "layer" => %{"value" => "Landing", "origin" => "user"},
        "Enriched text" => %{
          "value" => %{
            "object" => "value",
            "document" => %{
              "data" => %{},
              "nodes" => [
                %{
                  "data" => %{},
                  "type" => "paragraph",
                  "nodes" => [
                    %{
                      "text" => "Enriched example",
                      "marks" => [
                        %{
                          "data" => %{},
                          "type" => "bold",
                          "object" => "mark"
                        }
                      ],
                      "object" => "text"
                    }
                  ],
                  "object" => "block"
                }
              ],
              "object" => "document"
            }
          },
          "origin" => "another_user"
        }
      }

      content_without_enriched_text = %{
        "layer" => %{"value" => "Landing", "origin" => "user"}
      }

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{
              "cardinality" => "?",
              "label" => "Layer",
              "name" => "layer",
              "type" => "string",
              "values" => %{
                "fixed" => ["Business", "Landing", "Staging", "Source"]
              },
              "widget" => "dropdown"
            },
            %{
              "cardinality" => "*",
              "default" => "",
              "depends" => %{
                "on" => "layer",
                "to_be" => ["Business", "Staging"]
              },
              "label" => "Enriched text",
              "mandatory" => %{
                "on" => ""
              },
              "name" => "Enriched text",
              "type" => "enriched_text",
              "values" => nil,
              "widget" => "text"
            }
          ]
        }
      ]

      assert %{"Enriched text" => %{"value" => "Enriched example", "origin" => "another_user"}} =
               Format.search_values(content_with_enriched_text, %{content: fields})

      assert %{"Enriched text" => %{"value" => ""}} =
               Format.search_values(content_without_enriched_text, %{content: fields})
    end

    test "works well for system fields" do
      content = %{
        "layer" => %{"value" => "Landing", "origin" => "user"}
      }

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{
              "cardinality" => "?",
              "label" => "Layer",
              "name" => "layer",
              "type" => "string",
              "values" => %{
                "fixed" => ["Business", "Landing", "Staging", "Source"]
              },
              "widget" => "dropdown"
            },
            %{
              "cardinality" => "1",
              "label" => "system",
              "name" => "System",
              "type" => "system"
            }
          ]
        }
      ]

      assert %{"System" => %{"value" => nil}} = Format.search_values(content, %{content: fields})
    end
  end

  describe "enrich_content_values/2" do
    setup [:create_domain, :create_system, :create_hierarchy]

    test "cached_values/2 works well for empty system fields" do
      content = %{
        "Date" => %{"value" => "", "origin" => "user"},
        "link" => %{"value" => "", "origin" => "user"},
        "Float" => %{"value" => "", "origin" => "user"},
        "radio" => %{"value" => nil, "origin" => "user"},
        "checkbox" => %{"value" => nil, "origin" => "user"},
        "hierarchy" => %{"value" => "", "origin" => "user"},
        "text area" => %{"value" => "", "origin" => "user"},
        "identifier" => %{"value" => "218326ea-9e90-4acf-8153-96eea0cdcad0", "origin" => "user"},
        "text_input" => %{"value" => "", "origin" => "user"},
        "dropdown_user" => %{"value" => "", "origin" => "user"},
        "enriched text" => %{"value" => %{}, "origin" => "user"},
        "dropdown_domain" => %{"value" => "", "origin" => "user"},
        "dropdown_string" => %{"value" => nil, "origin" => "user"},
        "dropdown_system" => %{"value" => "", "origin" => "user"},
        "dropdown_system_no_origin" => nil,
        "dropdown_domain_no_origin" => nil
      }

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Text input",
              "name" => "text_input",
              "type" => "string",
              "values" => nil,
              "widget" => "string"
            },
            %{
              "cardinality" => "0",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Identifier",
              "name" => "identifier",
              "subscribable" => false,
              "type" => "string",
              "values" => nil,
              "widget" => "identifier"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Text area",
              "name" => "text area",
              "subscribable" => false,
              "type" => "string",
              "values" => nil,
              "widget" => "textarea"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Enriched text",
              "name" => "enriched text",
              "subscribable" => false,
              "type" => "enriched_text",
              "values" => nil,
              "widget" => "enriched_text"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Dropdown string",
              "name" => "dropdown_string",
              "subscribable" => false,
              "type" => "string",
              "values" => %{
                "fixed" => [
                  "D-A",
                  "D-B",
                  "D-C"
                ]
              },
              "widget" => "dropdown"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Dropdown system",
              "name" => "dropdown_system",
              "subscribable" => false,
              "type" => "system",
              "values" => nil,
              "widget" => "dropdown"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Dropdown system no origin",
              "name" => "dropdown_system_no_origin",
              "subscribable" => false,
              "type" => "system",
              "values" => nil,
              "widget" => "dropdown"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Dropdown user",
              "name" => "dropdown_user",
              "subscribable" => false,
              "type" => "user",
              "values" => %{
                "role_users" => nil
              },
              "widget" => "dropdown"
            },
            %{
              "cardinality" => "*",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Dropdown domain",
              "name" => "dropdown_domain",
              "subscribable" => false,
              "type" => "domain",
              "values" => nil,
              "widget" => "dropdown"
            },
            %{
              "cardinality" => "*",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Dropdown domain no origin",
              "name" => "dropdown_domain_no_origin",
              "subscribable" => false,
              "type" => "domain",
              "values" => nil,
              "widget" => "dropdown"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Hierarchy",
              "name" => "hierarchy",
              "subscribable" => false,
              "type" => "hierarchy",
              "values" => %{
                "hierarchy" => %{
                  "id" => 1,
                  "min_depth" => "1"
                }
              },
              "widget" => "dropdown"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Radio",
              "name" => "radio",
              "subscribable" => false,
              "type" => "string",
              "values" => %{
                "fixed" => [
                  "R-A",
                  "R-B",
                  "R-C"
                ]
              },
              "widget" => "radio"
            },
            %{
              "cardinality" => "*",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Checkbox",
              "name" => "checkbox",
              "subscribable" => false,
              "type" => "string",
              "values" => %{
                "fixed" => [
                  "C-A",
                  "C-B",
                  "C-C"
                ]
              },
              "widget" => "checkbox"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Date",
              "name" => "Date",
              "subscribable" => false,
              "type" => "date",
              "values" => nil,
              "widget" => "date"
            },
            %{
              "cardinality" => "*",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Link",
              "name" => "link",
              "subscribable" => false,
              "type" => "url",
              "values" => nil,
              "widget" => "pair_list"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Float",
              "name" => "Float",
              "subscribable" => false,
              "type" => "float",
              "values" => nil,
              "widget" => "number"
            },
            %{
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Categoría",
              "name" => "categoría",
              "subscribable" => false,
              "type" => "string",
              "values" => %{
                "fixed" => [
                  "Categoría A",
                  "Categoría B"
                ]
              },
              "widget" => "dropdown"
            },
            %{
              "ai_suggestion" => false,
              "cardinality" => "?",
              "default" => %{
                "origin" => "default",
                "value" => ""
              },
              "label" => "Categoría 2",
              "name" => "Categoría 2",
              "subscribable" => false,
              "type" => "string",
              "values" => %{
                "switch" => %{
                  "on" => "categoría",
                  "values" => %{
                    "Categoría A" => [
                      "Uno",
                      "Dos"
                    ],
                    "Categoría B" => [
                      "Tres",
                      "Cuatro"
                    ]
                  }
                }
              },
              "widget" => "dropdown"
            }
          ]
        }
      ]

      assert Format.enrich_content_values(content, %{content: fields})
    end

    test "enrich_content_values/2 gets cached values for system and domain fields", %{
      domain: %{id: domain_id} = domain,
      system: system
    } do
      content = %{
        "system" => %{"value" => %{"id" => system.id}, "origin" => "user"},
        "domain" => %{"value" => domain.id, "origin" => "user"},
        "foo" => %{"value" => "bar", "origin" => "user"}
      }

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{"name" => "system", "type" => "system", "cardinality" => 1},
            %{"name" => "domain", "type" => "domain", "cardinality" => "?"},
            %{"name" => "foo", "type" => "string", "cardinality" => "?"}
          ]
        }
      ]

      assert %{
               "system" => %{"value" => ^system, "origin" => "user"},
               "domain" => %{"value" => ^domain_id, "origin" => "user"},
               "foo" => %{"value" => "bar", "origin" => "user"}
             } = Format.enrich_content_values(content, %{content: fields})

      assert %{"domain" => %{"value" => %{id: ^domain_id}, "origin" => "user"}} =
               Format.enrich_content_values(content, %{content: fields}, [:domain])
    end

    test "enrich_content_values/2 gets cached values for hierarchy fields", %{
      hierarchy: %{nodes: nodes}
    } do
      [
        %{name: node_1_name, path: node_1_path, key: node_1_key, hierarchy_id: hierarchy_id},
        %{name: node_2_name, path: node_2_path, key: node_2_key},
        %{name: node_3_name, path: node_3_path, key: node_3_key}
      ] = Enum.take(nodes, 3)

      fields = [
        %{
          "name" => "group",
          "fields" => [
            %{
              "cardinality" => 1,
              "name" => "hierarchy_single",
              "type" => "hierarchy",
              "values" => %{"hierarchy" => %{"id" => hierarchy_id}}
            }
          ]
        },
        %{
          "name" => "group",
          "fields" => [
            %{
              "cardinality" => "+",
              "name" => "hierarchy_multi",
              "type" => "hierarchy",
              "values" => %{"hierarchy" => %{"id" => hierarchy_id}}
            }
          ]
        }
      ]

      content_single = %{"hierarchy_single" => %{"value" => node_1_key, "origin" => "user"}}

      assert %{
               "hierarchy_single" => %{
                 "value" => %{
                   "id" => ^node_1_key,
                   "name" => ^node_1_name,
                   "path" => ^node_1_path
                 },
                 "origin" => _
               }
             } = Format.enrich_content_values(content_single, %{content: fields}, [:hierarchy])

      content_multi = %{
        "hierarchy_multi" => %{"value" => [node_2_key, node_3_key], "origin" => "user"}
      }

      assert %{
               "hierarchy_multi" => %{
                 "value" => [
                   %{
                     "id" => ^node_2_key,
                     "name" => ^node_2_name,
                     "path" => ^node_2_path
                   },
                   %{
                     "id" => ^node_3_key,
                     "name" => ^node_3_name,
                     "path" => ^node_3_path
                   }
                 ],
                 "origin" => _
               }
             } = Format.enrich_content_values(content_multi, %{content: fields}, [:hierarchy])
    end
  end

  defp create_hierarchy(_) do
    hierarchy_id = 1927

    [
      hierarchy:
        CacheHelpers.insert_hierarchy(
          id: 1927,
          nodes: [
            build(:node, %{
              node_id: 50,
              name: "father",
              parent_id: nil,
              hierarchy_id: hierarchy_id,
              path: "/father"
            }),
            build(:node, %{
              node_id: 51,
              name: "children_1",
              parent_id: 50,
              hierarchy_id: hierarchy_id,
              path: "/father/children_1"
            }),
            build(:node, %{
              node_id: 52,
              name: "children_2",
              parent_id: 50,
              hierarchy_id: hierarchy_id,
              path: "/father/children_2"
            }),
            build(:node, %{
              node_id: 53,
              parent_id: nil,
              name: "children_2",
              hierarchy_id: hierarchy_id,
              path: "/children_2"
            }),
            build(:node, %{
              node_id: 54,
              parent_id: 53,
              name: "father",
              hierarchy_id: 1927,
              path: "/children_2/father"
            }),
            build(:node, %{
              node_id: 55,
              parent_id: 54,
              name: "children_2",
              hierarchy_id: hierarchy_id,
              path: "/children_2/father/children_2"
            })
          ]
        )
    ]
  end

  defp create_system(_) do
    [system: CacheHelpers.put_system()]
  end

  defp create_domain(_) do
    [domain: CacheHelpers.put_domain()]
  end
end
